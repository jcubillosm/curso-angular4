Estructura del fichero de Angula 4:

-Node_modules:
Guarda todas las dependencias que npm se descarga

- .angular-cli.json:
  Configuración del CLI
- .editorconfig:
  No interesa
- .gitignore:
  Excepciones para que no detecte GIT y no commitee
- Karma.conf.js:
  Test funcionales
- Package.json:
  Dependencias y paquetes necesarios para que Angular4 funcione
- tsconfig.json:
  Fichero de configuración del typescript
- tslint.json:
  También es configuración del typescript


- src:
    + tsconfig.**.json y typings:
      Ficheros de configuración del typescript
    + main.ts:
      Aquí se carga el módulo principal de la app
    + index.html:
      Página principal que carga el Framework
    + environments:
      Variables globales para entornos de desarrollo o producción
    + assets:
      Directorio donde ubicar imágenes y estilos css
    + app:
      Contiene los componentes (.ts, html, css)
      app.component.ts: Componente principal
      app.module.ts: módulo principal en el que se cargan los componentes

/************************************************************************************/

Elementos que conforman Angular

- COMPONENTES
  + Un componente controla un trozo de pantalla o vista.
  + La lógica de un componente dentro de una clase es dar soporte a una vista interactuando con ella a través de un API con propiedades y métodos.
  + El componente hace de mediador entre la vista a través de la plantilla y la lógica de la app, donde se incluirá el modelo de datos; es decir, una especie de controlador ****

  + Componente app.component.ts: Es el componente principal que da soporte al resto de componentes

- PLANTILLAS
  + Las plantillas van a definir la vista de los componentes
  + Son htmls y tienen sintaxis especial de Angular. Trabajando con el databinding y las directivas

- DECORADORES Y METADATOS
  + Con los decoradores (patrón de diseño) vamos a configurar dinámicamente atributos/metadatos de las clases y componentes.
  + Los metadatos van a describir a las clases pero también describen relaciones, por ejemplo si tenemos un componente y una plantilla el metadato se va a encargar de decirle a Angular que ese componente y esa plantilla van juntos, entre otras muchas cosas

- SERVICIOS
  + Son clases con un objeto claro, facilita la reutilización, son un tipo de componente dentro de la arquitectura de Angular, y mediante la inyección de dependencias los podemos usar en otros componentes principales.

-PROVIDERS
  + Son servicios que nos proveen de datos o funcionalidades mediante sus métodos.

- DIRECTIVAS
  + Funcionalidades aplicables al DOM y a los elementos HTML en las plantillas de un componente.
  + Una directiva puede servir para controlar que un div se muestre o no, o recorrer un array en la vista (directivas estructurales, estructuras condicionales y de control) o incluso también puede servir para darle un estilo a un elemento del HTML o también para interactuar con el modelo de datos del componente.

  + Básicamente son nuevos atributos para aplicarle a cualquier cosa en la vista/plantilla

/************************************************************************************/

Estructuración de la carpeta app

- Crear carpeta por componente

/************************************************************************************/

TYPESCRIPT

  - Pseudolenguaje que permite dar a Javascript más funcionalidades extras
  - Tipado fuerte
  - Mejor orientación a objetos
  - Ultimas características de Emacs6

  - Variables y tipos de datos:
    + Definición: 
        private / public nombreVariable: string = 'Mi nombre'


    + En el constructor dar el valor de las variables declaradas
    + En el ngOnInit llamar a las funciones, a los servicios. Este método es el primero que se carga después del constructor

  - VAR / LET:
    + let es la nueva forma de definir una variable.
    + La diferencia entre let y var es el alcance de la variable. let se queda dentro del ámbito en el que ha sido declarada.
      VAR: Ámbito GLOBAL
      LET: Ámbito a nivel de BLOQUE

  *****IMPORTANTE utilizar las funciones de flecha en las funciones callback para poder salir del ámbito de la función
      En el callback utilizo una función => para poder salir del ámbito local de la función y asignar valores a las variables de la clase o llamar sus métodos.

/************************************************************************************/

DEFINICIóN DE UNA VARIABLE GENERAL (definición de un MODELO)

  - Es posible crear un componente empleado.ts que contenga la definición de una clase que luego servirá para instanciar varias variables
    con la llamada 'new' 
      por ejemplo: 
                    this.empleado = new Empleado('David', 45, 'Cocinero', true);

CASTING DE TIPO
  Puedo hacer un casting de tipo de la siguiente manera var errorMessage = <any>error;
  se define la variable y se hace casting sobre el valor que se va a asignar

/************************************************************************************/

DIRECTIVAS

  - *ngFor
  - *ngIf
  - (click)  => Captura evento
  - (ngSubmit) => Captura evento
  - [ngSwitch]
    + *ngSwitchCase
  - [(ngModel)]           => two databinding
  - [ngStyle]             Permite definir un json con varios valores
    + [style.border]      Aplica a un único estilo
  - [ngClass]             Permite definir un json con varias clases
    + [class.fondoAzul]   Aplica a una clase
  - [routerLink]
  - [routerLinkActive]
  - #formCoche="ngForm"
  - [disabled]="!formCoche.form.valid"


/************************************************************************************/

ROUTING

  - Comprobar que la etiqueta <base href="/"> existe en el index.html
  - En la carpeta app crear el fichero app.routing.ts:
    + Importar los módulos necesarios
  - Uso de la etiqueta <router-outlet> para cargar los componentes
  - [routerLink] para crear enlaces
  - [routerLinkActive] ruta activa

  - Para pasar parámetros por la url es necesario usar:
    + import { Router, ActivatedRoute, Params } from '@angular/router';
    + Definir en el constructor : 
              private _route: ActivatedRoute,
              private _router: Router

  ***** IMPORTANTE utilizar las funciones de flecha en las funciones callback para poder salir del ámbito de la función


/************************************************************************************/

REDIRECCIONES

  - Crear una función que contenga la dirección a donde se desea ser redirigido:   this._router.navigate(['/contacto','actycrea.es']); 
    this._router.navigate([URL,PARAMETRO]); el parametro es opcional

/************************************************************************************/

SERVICIOS

  - Clases con un objetivo claro que permiten la reutilización de código
  - Utiliza el decorador @Injectable


  *** CURIOSIDAD en la definición de una función puedo definir el tipo de argumento de entrada y el tipo del valor que devuelve
      miFuncion(nombre_prenda:string):Array<string>{}

  - PETICIONES HTTP y AJAX:
    + import { Http, Response, Headers } from '@angular/http';
    + import 'rxjs/add/operator/map'; => librería para mapear los datos
    + import { Observable} from 'rxjs/Observable'; => permite utilizar rxjs para la respuesta mapearla y trabajar con ella
    + para realizar las peticiones Ajax es necesario añadir: constructor(private _http:Http)
    + this._http.get(this.url) Realiza la petición a la url indicada
    + this._http.get(this.url).map(res => res.json()))  El método map() recoge la respuesta que se produce por la anterior petición get
      ++ res.json() convierte la respuesta en un objeto utilizable en el código
      ++ Para poder recoger la respuesta del ajax del servicio en un componente que utilice a dicho servicio es necesario utilizar el método subscribe(). Este método tiene dos funciones de callback: 1. para capturar el resultado. 2. para capturar el error.

/************************************************************************************/

PIPES (|) y FILTERS (tuberías y filtros)

  - new Date permite utilizar pipe | date
    {{fecha | date: 'dd/MM/yyyy'}}

  - pipe de texto {{nombre | uppercase | lowercase}}
  - También se pueden generar los propios pipes utilizando:
      + los paquetes: import {Pipe, PipeTransform} from '@angular/core';
      + El decorador @Pipe
      + Implementar la interfaz transform a partir del uso de: export class ConversorPipe implements PipeTransform
  - Importante añadirlo en app.modules

/************************************************************************************/

FORMULARIO

  - Es necesario tener un modelo
  - Validaciones HTML5:
    + type
    + required
    + pattern
    + name.touched (sustituir name con el correspondiente valor asignado en nombre)
    + name.valid
    + maxlength
    + accept  (solo acepta un tipo de archivo determinado "image/jpg" o extensión ".pdf", puede aceptar más de una extensión "application/pdf,image/jpg" y también varias exttensiones para un tipo de archivo "image/*")

  - [disabled]="!formCoche.form.valid" en el botón de ENVIAR/GUARDAR
  - (ngSubmit)="onSubmit(); formCoche.reset()"   formCoche.reset() para resetear el form

/************************************************************************************/

NGTEMPLATE

  - Permite hacer un if y un else en las plantillas
  - ngTemplate genera una "plantilla invisible" que se muestra cuando es necesario
  - Puede observarse en el ejemplo que se usa un 'else' a un ancla asignado en el tag de ng-template 
    <div *ngIf="administrador; else noAdmin">
  - Ejemplo: 

      <div *ngIf="administrador; else noAdmin">
        <button (click)="cambiar(false)">Cambiar Permisos de administrador</button>
        <strong style="background-color: orange">Eres el administrador de la webapp</strong>
      </div>
      <ng-template #noAdmin>
        <button (click)="cambiar(true)">Cambiar Permisos de administrador</button>
        <strong style="background-color: red; color: white;">No Eres el administrador de la webapp</strong>
      </ng-template>

  - Existe la opción de cargar varios ng-template utilizando 'then' <div *ngIf="administrador; then admin else noAdmin">

/************************************************************************************/

API REST

  Aplicación web a nivel de Backend que va a interactuar con una BBDD

  - Acceso CORS y hosts virtuales
    Acceso CORS:

    Cuando trabajamos con AJAX puede pasar que nos salten errores con el CORS, antes de empezar configura tu servidor web Apache de esta forma:

    http://victorroblesweb.es/2016/01/20/evitar-error-cors-access-control-allow-origin-con-ajax/


    Hosts virtuales:

    Si quieres simular el ambiente que va a tener tu aplicación en producción y no quieres usar el lite-server puedes crear un host virtual en Apache y así simular un dominio real:

    http://victorroblesweb.es/2016/03/26/crear-varios-hosts-virtuales-en-wampserver/


  - Si tienes curiosidad, antes de continuar, puedes empezar a revisar como crear un API REST con PHP usando Slim:

    http://victorroblesweb.es/2015/01/16/api-rest-con-slim/

    Además en la sección de cursos de mi blog tienes un curso gratuito acerca de esto.



